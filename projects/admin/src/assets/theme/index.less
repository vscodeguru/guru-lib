/* stylelint-disable */
.bezierEasingMixin() {
  @functions: ~`(function() {
    var NEWTON_ITERATIONS = 4;
    var NEWTON_MIN_SLOPE = 0.001;
    var SUBDIVISION_PRECISION = 0.0000001;
    var SUBDIVISION_MAX_ITERATIONS = 10;

    var kSplineTableSize = 11;
    var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

    var float32ArraySupported = typeof Float32Array === 'function';

    function A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }
    function B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }
    function C (aA1)      { return 3.0 * aA1; }

    // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
    function calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT; }

    // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
    function getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1); }

    function binarySubdivide (aX, aA, aB, mX1, mX2) {
      var currentX, currentT, i = 0;
      do {
        currentT = aA + (aB - aA) / 2.0;
        currentX = calcBezier(currentT, mX1, mX2) - aX;
        if (currentX > 0.0) {
          aB = currentT;
        } else {
          aA = currentT;
        }
      } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
      return currentT;
    }

    function newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {
     for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
       var currentSlope = getSlope(aGuessT, mX1, mX2);
       if (currentSlope === 0.0) {
         return aGuessT;
       }
       var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
       aGuessT -= currentX / currentSlope;
     }
     return aGuessT;
    }

    var BezierEasing = function (mX1, mY1, mX2, mY2) {
      if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
        throw new Error('bezier x values must be in [0, 1] range');
      }

      // Precompute samples table
      var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
      if (mX1 !== mY1 || mX2 !== mY2) {
        for (var i = 0; i < kSplineTableSize; ++i) {
          sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
        }
      }

      function getTForX (aX) {
        var intervalStart = 0.0;
        var currentSample = 1;
        var lastSample = kSplineTableSize - 1;

        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
          intervalStart += kSampleStepSize;
        }
        --currentSample;

        // Interpolate to provide an initial guess for t
        var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
        var guessForT = intervalStart + dist * kSampleStepSize;

        var initialSlope = getSlope(guessForT, mX1, mX2);
        if (initialSlope >= NEWTON_MIN_SLOPE) {
          return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
        } else if (initialSlope === 0.0) {
          return guessForT;
        } else {
          return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
        }
      }

      return function BezierEasing (x) {
        if (mX1 === mY1 && mX2 === mY2) {
          return x; // linear
        }
        // Because JavaScript number are imprecise, we should guarantee the extremes are right.
        if (x === 0) {
          return 0;
        }
        if (x === 1) {
          return 1;
        }
        return calcBezier(getTForX(x), mY1, mY2);
      };
    };

    this.colorEasing = BezierEasing(0.26, 0.09, 0.37, 0.18);
    // less 3 requires a return
    return '';
  })()`;
  }
  // It is hacky way to make this function will be compiled preferentially by less
  // resolve error: `ReferenceError: colorPalette is not defined`
  // https://github.com/ant-design/ant-motion/issues/44
  .bezierEasingMixin();
/* stylelint-disable declaration-bang-space-before,no-duplicate-selectors,string-no-newline */
.tinyColorMixin() {
  @functions: ~`(function() {
  // TinyColor v1.4.1
  // https://github.com/bgrins/TinyColor
  // 2016-07-07, Brian Grinstead, MIT License
  var trimLeft = /^\s+/,
      trimRight = /\s+$/,
      tinyCounter = 0,
      mathRound = Math.round,
      mathMin = Math.min,
      mathMax = Math.max,
      mathRandom = Math.random;

  function tinycolor (color, opts) {

      color = (color) ? color : '';
      opts = opts || { };

      // If input is already a tinycolor, return itself
      if (color instanceof tinycolor) {
         return color;
      }
      // If we are called as a function, call using new instead
      if (!(this instanceof tinycolor)) {
          return new tinycolor(color, opts);
      }

      var rgb = inputToRGB(color);
      this._originalInput = color,
      this._r = rgb.r,
      this._g = rgb.g,
      this._b = rgb.b,
      this._a = rgb.a,
      this._roundA = mathRound(100*this._a) / 100,
      this._format = opts.format || rgb.format;
      this._gradientType = opts.gradientType;

      // Don't let the range of [0,255] come back in [0,1].
      // Potentially lose a little bit of precision here, but will fix issues where
      // .5 gets interpreted as half of the total, instead of half of 1
      // If it was supposed to be 128, this was already taken care of by inputToRgb
      if (this._r < 1) { this._r = mathRound(this._r); }
      if (this._g < 1) { this._g = mathRound(this._g); }
      if (this._b < 1) { this._b = mathRound(this._b); }

      this._ok = rgb.ok;
      this._tc_id = tinyCounter++;
  }

  tinycolor.prototype = {
      isDark: function() {
          return this.getBrightness() < 128;
      },
      isLight: function() {
          return !this.isDark();
      },
      isValid: function() {
          return this._ok;
      },
      getOriginalInput: function() {
        return this._originalInput;
      },
      getFormat: function() {
          return this._format;
      },
      getAlpha: function() {
          return this._a;
      },
      getBrightness: function() {
          //http://www.w3.org/TR/AERT#color-contrast
          var rgb = this.toRgb();
          return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
      },
      getLuminance: function() {
          //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
          var rgb = this.toRgb();
          var RsRGB, GsRGB, BsRGB, R, G, B;
          RsRGB = rgb.r/255;
          GsRGB = rgb.g/255;
          BsRGB = rgb.b/255;

          if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}
          if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}
          if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}
          return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);
      },
      setAlpha: function(value) {
          this._a = boundAlpha(value);
          this._roundA = mathRound(100*this._a) / 100;
          return this;
      },
      toHsv: function() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
      },
      toHsvString: function() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
          return (this._a == 1) ?
            "hsv("  + h + ", " + s + "%, " + v + "%)" :
            "hsva(" + h + ", " + s + "%, " + v + "%, "+ this._roundA + ")";
      },
      toHsl: function() {
          var hsl = rgbToHsl(this._r, this._g, this._b);
          return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
      },
      toHslString: function() {
          var hsl = rgbToHsl(this._r, this._g, this._b);
          var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
          return (this._a == 1) ?
            "hsl("  + h + ", " + s + "%, " + l + "%)" :
            "hsla(" + h + ", " + s + "%, " + l + "%, "+ this._roundA + ")";
      },
      toHex: function(allow3Char) {
          return rgbToHex(this._r, this._g, this._b, allow3Char);
      },
      toHexString: function(allow3Char) {
          return '#' + this.toHex(allow3Char);
      },
      toHex8: function(allow4Char) {
          return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
      },
      toHex8String: function(allow4Char) {
          return '#' + this.toHex8(allow4Char);
      },
      toRgb: function() {
          return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
      },
      toRgbString: function() {
          return (this._a == 1) ?
            "rgb("  + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" :
            "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
      },
      toPercentageRgb: function() {
          return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };
      },
      toPercentageRgbString: function() {
          return (this._a == 1) ?
            "rgb("  + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" :
            "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
      },
      toName: function() {
          if (this._a === 0) {
              return "transparent";
          }

          if (this._a < 1) {
              return false;
          }

          return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
      },
      toFilter: function(secondColor) {
          var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
          var secondHex8String = hex8String;
          var gradientType = this._gradientType ? "GradientType = 1, " : "";

          if (secondColor) {
              var s = tinycolor(secondColor);
              secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
          }

          return "progid:DXImageTransform.Microsoft.gradient("+gradientType+"startColorstr="+hex8String+",endColorstr="+secondHex8String+")";
      },
      toString: function(format) {
          var formatSet = !!format;
          format = format || this._format;

          var formattedString = false;
          var hasAlpha = this._a < 1 && this._a >= 0;
          var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");

          if (needsAlphaFormat) {
              // Special case for "transparent", all other non-alpha formats
              // will return rgba when there is transparency.
              if (format === "name" && this._a === 0) {
                  return this.toName();
              }
              return this.toRgbString();
          }
          if (format === "rgb") {
              formattedString = this.toRgbString();
          }
          if (format === "prgb") {
              formattedString = this.toPercentageRgbString();
          }
          if (format === "hex" || format === "hex6") {
              formattedString = this.toHexString();
          }
          if (format === "hex3") {
              formattedString = this.toHexString(true);
          }
          if (format === "hex4") {
              formattedString = this.toHex8String(true);
          }
          if (format === "hex8") {
              formattedString = this.toHex8String();
          }
          if (format === "name") {
              formattedString = this.toName();
          }
          if (format === "hsl") {
              formattedString = this.toHslString();
          }
          if (format === "hsv") {
              formattedString = this.toHsvString();
          }

          return formattedString || this.toHexString();
      },
      clone: function() {
          return tinycolor(this.toString());
      },

      _applyModification: function(fn, args) {
          var color = fn.apply(null, [this].concat([].slice.call(args)));
          this._r = color._r;
          this._g = color._g;
          this._b = color._b;
          this.setAlpha(color._a);
          return this;
      },
      lighten: function() {
          return this._applyModification(lighten, arguments);
      },
      brighten: function() {
          return this._applyModification(brighten, arguments);
      },
      darken: function() {
          return this._applyModification(darken, arguments);
      },
      desaturate: function() {
          return this._applyModification(desaturate, arguments);
      },
      saturate: function() {
          return this._applyModification(saturate, arguments);
      },
      greyscale: function() {
          return this._applyModification(greyscale, arguments);
      },
      spin: function() {
          return this._applyModification(spin, arguments);
      },

      _applyCombination: function(fn, args) {
          return fn.apply(null, [this].concat([].slice.call(args)));
      },
      analogous: function() {
          return this._applyCombination(analogous, arguments);
      },
      complement: function() {
          return this._applyCombination(complement, arguments);
      },
      monochromatic: function() {
          return this._applyCombination(monochromatic, arguments);
      },
      splitcomplement: function() {
          return this._applyCombination(splitcomplement, arguments);
      },
      triad: function() {
          return this._applyCombination(triad, arguments);
      },
      tetrad: function() {
          return this._applyCombination(tetrad, arguments);
      }
  };

  // If input is an object, force 1 into "1.0" to handle ratios properly
  // String input requires "1.0" as input, so 1 will be treated as 1
  tinycolor.fromRatio = function(color, opts) {
      if (typeof color == "object") {
          var newColor = {};
          for (var i in color) {
              if (color.hasOwnProperty(i)) {
                  if (i === "a") {
                      newColor[i] = color[i];
                  }
                  else {
                      newColor[i] = convertToPercentage(color[i]);
                  }
              }
          }
          color = newColor;
      }

      return tinycolor(color, opts);
  };

  // Given a string or object, convert that input to RGB
  // Possible string inputs:
  //
  //     "red"
  //     "#f00" or "f00"
  //     "#ff0000" or "ff0000"
  //     "#ff000000" or "ff000000"
  //     "rgb 255 0 0" or "rgb (255, 0, 0)"
  //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
  //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
  //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
  //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
  //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
  //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
  //
  function inputToRGB(color) {

      var rgb = { r: 0, g: 0, b: 0 };
      var a = 1;
      var s = null;
      var v = null;
      var l = null;
      var ok = false;
      var format = false;

      if (typeof color == "string") {
          color = stringInputToObject(color);
      }

      if (typeof color == "object") {
          if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
              rgb = rgbToRgb(color.r, color.g, color.b);
              ok = true;
              format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
          }
          else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
              s = convertToPercentage(color.s);
              v = convertToPercentage(color.v);
              rgb = hsvToRgb(color.h, s, v);
              ok = true;
              format = "hsv";
          }
          else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
              s = convertToPercentage(color.s);
              l = convertToPercentage(color.l);
              rgb = hslToRgb(color.h, s, l);
              ok = true;
              format = "hsl";
          }

          if (color.hasOwnProperty("a")) {
              a = color.a;
          }
      }

      a = boundAlpha(a);

      return {
          ok: ok,
          format: color.format || format,
          r: mathMin(255, mathMax(rgb.r, 0)),
          g: mathMin(255, mathMax(rgb.g, 0)),
          b: mathMin(255, mathMax(rgb.b, 0)),
          a: a
      };
  }

  // Conversion Functions
  // --------------------

  // rgbToHsl, rgbToHsv, hslToRgb, hsvToRgb modified from:
  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

  // rgbToRgb
  // Handle bounds / percentage checking to conform to CSS color spec
  // <http://www.w3.org/TR/css3-color/>
  // *Assumes:* r, g, b in [0, 255] or [0, 1]
  // *Returns:* { r, g, b } in [0, 255]
  function rgbToRgb(r, g, b){
      return {
          r: bound01(r, 255) * 255,
          g: bound01(g, 255) * 255,
          b: bound01(b, 255) * 255
      };
  }

  // rgbToHsl
  // Converts an RGB color value to HSL.
  // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
  // *Returns:* { h, s, l } in [0,1]
  function rgbToHsl(r, g, b) {

      r = bound01(r, 255);
      g = bound01(g, 255);
      b = bound01(b, 255);

      var max = mathMax(r, g, b), min = mathMin(r, g, b);
      var h, s, l = (max + min) / 2;

      if(max == min) {
          h = s = 0; // achromatic
      }
      else {
          var d = max - min;
          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
          switch(max) {
              case r: h = (g - b) / d + (g < b ? 6 : 0); break;
              case g: h = (b - r) / d + 2; break;
              case b: h = (r - g) / d + 4; break;
          }

          h /= 6;
      }

      return { h: h, s: s, l: l };
  }

  // hslToRgb
  // Converts an HSL color value to RGB.
  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
  // *Returns:* { r, g, b } in the set [0, 255]
  function hslToRgb(h, s, l) {
      var r, g, b;

      h = bound01(h, 360);
      s = bound01(s, 100);
      l = bound01(l, 100);

      function hue2rgb(p, q, t) {
          if(t < 0) t += 1;
          if(t > 1) t -= 1;
          if(t < 1/6) return p + (q - p) * 6 * t;
          if(t < 1/2) return q;
          if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
          return p;
      }

      if(s === 0) {
          r = g = b = l; // achromatic
      }
      else {
          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var p = 2 * l - q;
          r = hue2rgb(p, q, h + 1/3);
          g = hue2rgb(p, q, h);
          b = hue2rgb(p, q, h - 1/3);
      }

      return { r: r * 255, g: g * 255, b: b * 255 };
  }

  // rgbToHsv
  // Converts an RGB color value to HSV
  // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
  // *Returns:* { h, s, v } in [0,1]
  function rgbToHsv(r, g, b) {

      r = bound01(r, 255);
      g = bound01(g, 255);
      b = bound01(b, 255);

      var max = mathMax(r, g, b), min = mathMin(r, g, b);
      var h, s, v = max;

      var d = max - min;
      s = max === 0 ? 0 : d / max;

      if(max == min) {
          h = 0; // achromatic
      }
      else {
          switch(max) {
              case r: h = (g - b) / d + (g < b ? 6 : 0); break;
              case g: h = (b - r) / d + 2; break;
              case b: h = (r - g) / d + 4; break;
          }
          h /= 6;
      }
      return { h: h, s: s, v: v };
  }

  // hsvToRgb
  // Converts an HSV color value to RGB.
  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
  // *Returns:* { r, g, b } in the set [0, 255]
   function hsvToRgb(h, s, v) {

      h = bound01(h, 360) * 6;
      s = bound01(s, 100);
      v = bound01(v, 100);

      var i = Math.floor(h),
          f = h - i,
          p = v * (1 - s),
          q = v * (1 - f * s),
          t = v * (1 - (1 - f) * s),
          mod = i % 6,
          r = [v, q, p, p, t, v][mod],
          g = [t, v, v, q, p, p][mod],
          b = [p, p, t, v, v, q][mod];

      return { r: r * 255, g: g * 255, b: b * 255 };
  }

  // rgbToHex
  // Converts an RGB color to hex
  // Assumes r, g, and b are contained in the set [0, 255]
  // Returns a 3 or 6 character hex
  function rgbToHex(r, g, b, allow3Char) {

      var hex = [
          pad2(mathRound(r).toString(16)),
          pad2(mathRound(g).toString(16)),
          pad2(mathRound(b).toString(16))
      ];

      // Return a 3 character hex if possible
      if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
      }

      return hex.join("");
  }

  // rgbaToHex
  // Converts an RGBA color plus alpha transparency to hex
  // Assumes r, g, b are contained in the set [0, 255] and
  // a in [0, 1]. Returns a 4 or 8 character rgba hex
  function rgbaToHex(r, g, b, a, allow4Char) {

      var hex = [
          pad2(mathRound(r).toString(16)),
          pad2(mathRound(g).toString(16)),
          pad2(mathRound(b).toString(16)),
          pad2(convertDecimalToHex(a))
      ];

      // Return a 4 character hex if possible
      if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
      }

      return hex.join("");
  }

  // rgbaToArgbHex
  // Converts an RGBA color to an ARGB Hex8 string
  // Rarely used, but required for "toFilter()"
  function rgbaToArgbHex(r, g, b, a) {

      var hex = [
          pad2(convertDecimalToHex(a)),
          pad2(mathRound(r).toString(16)),
          pad2(mathRound(g).toString(16)),
          pad2(mathRound(b).toString(16))
      ];

      return hex.join("");
  }

  // equals
  // Can be called with any tinycolor input
  tinycolor.equals = function (color1, color2) {
      if (!color1 || !color2) { return false; }
      return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
  };

  tinycolor.random = function() {
      return tinycolor.fromRatio({
          r: mathRandom(),
          g: mathRandom(),
          b: mathRandom()
      });
  };

  // Modification Functions
  // ----------------------
  // Thanks to less.js for some of the basics here
  // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

  function desaturate(color, amount) {
      amount = (amount === 0) ? 0 : (amount || 10);
      var hsl = tinycolor(color).toHsl();
      hsl.s -= amount / 100;
      hsl.s = clamp01(hsl.s);
      return tinycolor(hsl);
  }

  function saturate(color, amount) {
      amount = (amount === 0) ? 0 : (amount || 10);
      var hsl = tinycolor(color).toHsl();
      hsl.s += amount / 100;
      hsl.s = clamp01(hsl.s);
      return tinycolor(hsl);
  }

  function greyscale(color) {
      return tinycolor(color).desaturate(100);
  }

  function lighten (color, amount) {
      amount = (amount === 0) ? 0 : (amount || 10);
      var hsl = tinycolor(color).toHsl();
      hsl.l += amount / 100;
      hsl.l = clamp01(hsl.l);
      return tinycolor(hsl);
  }

  function brighten(color, amount) {
      amount = (amount === 0) ? 0 : (amount || 10);
      var rgb = tinycolor(color).toRgb();
      rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));
      rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));
      rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));
      return tinycolor(rgb);
  }

  function darken (color, amount) {
      amount = (amount === 0) ? 0 : (amount || 10);
      var hsl = tinycolor(color).toHsl();
      hsl.l -= amount / 100;
      hsl.l = clamp01(hsl.l);
      return tinycolor(hsl);
  }

  // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
  // Values outside of this range will be wrapped into this range.
  function spin(color, amount) {
      var hsl = tinycolor(color).toHsl();
      var hue = (hsl.h + amount) % 360;
      hsl.h = hue < 0 ? 360 + hue : hue;
      return tinycolor(hsl);
  }

  // Combination Functions
  // ---------------------
  // Thanks to jQuery xColor for some of the ideas behind these
  // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

  function complement(color) {
      var hsl = tinycolor(color).toHsl();
      hsl.h = (hsl.h + 180) % 360;
      return tinycolor(hsl);
  }

  function triad(color) {
      var hsl = tinycolor(color).toHsl();
      var h = hsl.h;
      return [
          tinycolor(color),
          tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),
          tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })
      ];
  }

  function tetrad(color) {
      var hsl = tinycolor(color).toHsl();
      var h = hsl.h;
      return [
          tinycolor(color),
          tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),
          tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),
          tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })
      ];
  }

  function splitcomplement(color) {
      var hsl = tinycolor(color).toHsl();
      var h = hsl.h;
      return [
          tinycolor(color),
          tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),
          tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})
      ];
  }

  function analogous(color, results, slices) {
      results = results || 6;
      slices = slices || 30;

      var hsl = tinycolor(color).toHsl();
      var part = 360 / slices;
      var ret = [tinycolor(color)];

      for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {
          hsl.h = (hsl.h + part) % 360;
          ret.push(tinycolor(hsl));
      }
      return ret;
  }

  function monochromatic(color, results) {
      results = results || 6;
      var hsv = tinycolor(color).toHsv();
      var h = hsv.h, s = hsv.s, v = hsv.v;
      var ret = [];
      var modification = 1 / results;

      while (results--) {
          ret.push(tinycolor({ h: h, s: s, v: v}));
          v = (v + modification) % 1;
      }

      return ret;
  }

  // Utility Functions
  // ---------------------

  tinycolor.mix = function(color1, color2, amount) {
      amount = (amount === 0) ? 0 : (amount || 50);

      var rgb1 = tinycolor(color1).toRgb();
      var rgb2 = tinycolor(color2).toRgb();

      var p = amount / 100;

      var rgba = {
          r: ((rgb2.r - rgb1.r) * p) + rgb1.r,
          g: ((rgb2.g - rgb1.g) * p) + rgb1.g,
          b: ((rgb2.b - rgb1.b) * p) + rgb1.b,
          a: ((rgb2.a - rgb1.a) * p) + rgb1.a
      };

      return tinycolor(rgba);
  };

  // Readability Functions
  // ---------------------
  // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)

  // contrast
  // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
  tinycolor.readability = function(color1, color2) {
      var c1 = tinycolor(color1);
      var c2 = tinycolor(color2);
      return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);
  };

  // isReadable
  // Ensure that foreground and background color combinations meet WCAG2 guidelines.
  // The third argument is an optional Object.
  //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
  //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
  // If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.

  // *Example*
  //    tinycolor.isReadable("#000", "#111") => false
  //    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
  tinycolor.isReadable = function(color1, color2, wcag2) {
      var readability = tinycolor.readability(color1, color2);
      var wcag2Parms, out;

      out = false;

      wcag2Parms = validateWCAG2Parms(wcag2);
      switch (wcag2Parms.level + wcag2Parms.size) {
          case "AAsmall":
          case "AAAlarge":
              out = readability >= 4.5;
              break;
          case "AAlarge":
              out = readability >= 3;
              break;
          case "AAAsmall":
              out = readability >= 7;
              break;
      }
      return out;

  };

  // mostReadable
  // Given a base color and a list of possible foreground or background
  // colors for that base, returns the most readable color.
  // Optionally returns Black or White if the most readable color is unreadable.
  // *Example*
  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
  tinycolor.mostReadable = function(baseColor, colorList, args) {
      var bestColor = null;
      var bestScore = 0;
      var readability;
      var includeFallbackColors, level, size ;
      args = args || {};
      includeFallbackColors = args.includeFallbackColors ;
      level = args.level;
      size = args.size;

      for (var i= 0; i < colorList.length ; i++) {
          readability = tinycolor.readability(baseColor, colorList[i]);
          if (readability > bestScore) {
              bestScore = readability;
              bestColor = tinycolor(colorList[i]);
          }
      }

      if (tinycolor.isReadable(baseColor, bestColor, {"level":level,"size":size}) || !includeFallbackColors) {
          return bestColor;
      }
      else {
          args.includeFallbackColors=false;
          return tinycolor.mostReadable(baseColor,["#fff", "#000"],args);
      }
  };

  // Big List of Colors
  // ------------------
  // <http://www.w3.org/TR/css3-color/#svg-color>
  var names = tinycolor.names = {
      aliceblue: "f0f8ff",
      antiquewhite: "faebd7",
      aqua: "0ff",
      aquamarine: "7fffd4",
      azure: "f0ffff",
      beige: "f5f5dc",
      bisque: "ffe4c4",
      black: "000",
      blanchedalmond: "ffebcd",
      blue: "00f",
      blueviolet: "8a2be2",
      brown: "a52a2a",
      burlywood: "deb887",
      burntsienna: "ea7e5d",
      cadetblue: "5f9ea0",
      chartreuse: "7fff00",
      chocolate: "d2691e",
      coral: "ff7f50",
      cornflowerblue: "6495ed",
      cornsilk: "fff8dc",
      crimson: "dc143c",
      cyan: "0ff",
      darkblue: "00008b",
      darkcyan: "008b8b",
      darkgoldenrod: "b8860b",
      darkgray: "a9a9a9",
      darkgreen: "006400",
      darkgrey: "a9a9a9",
      darkkhaki: "bdb76b",
      darkmagenta: "8b008b",
      darkolivegreen: "556b2f",
      darkorange: "ff8c00",
      darkorchid: "9932cc",
      darkred: "8b0000",
      darksalmon: "e9967a",
      darkseagreen: "8fbc8f",
      darkslateblue: "483d8b",
      darkslategray: "2f4f4f",
      darkslategrey: "2f4f4f",
      darkturquoise: "00ced1",
      darkviolet: "9400d3",
      deeppink: "ff1493",
      deepskyblue: "00bfff",
      dimgray: "696969",
      dimgrey: "696969",
      dodgerblue: "1e90ff",
      firebrick: "b22222",
      floralwhite: "fffaf0",
      forestgreen: "228b22",
      fuchsia: "f0f",
      gainsboro: "dcdcdc",
      ghostwhite: "f8f8ff",
      gold: "ffd700",
      goldenrod: "daa520",
      gray: "808080",
      green: "008000",
      greenyellow: "adff2f",
      grey: "808080",
      honeydew: "f0fff0",
      hotpink: "ff69b4",
      indianred: "cd5c5c",
      indigo: "4b0082",
      ivory: "fffff0",
      khaki: "f0e68c",
      lavender: "e6e6fa",
      lavenderblush: "fff0f5",
      lawngreen: "7cfc00",
      lemonchiffon: "fffacd",
      lightblue: "add8e6",
      lightcoral: "f08080",
      lightcyan: "e0ffff",
      lightgoldenrodyellow: "fafad2",
      lightgray: "d3d3d3",
      lightgreen: "90ee90",
      lightgrey: "d3d3d3",
      lightpink: "ffb6c1",
      lightsalmon: "ffa07a",
      lightseagreen: "20b2aa",
      lightskyblue: "87cefa",
      lightslategray: "789",
      lightslategrey: "789",
      lightsteelblue: "b0c4de",
      lightyellow: "ffffe0",
      lime: "0f0",
      limegreen: "32cd32",
      linen: "faf0e6",
      magenta: "f0f",
      maroon: "800000",
      mediumaquamarine: "66cdaa",
      mediumblue: "0000cd",
      mediumorchid: "ba55d3",
      mediumpurple: "9370db",
      mediumseagreen: "3cb371",
      mediumslateblue: "7b68ee",
      mediumspringgreen: "00fa9a",
      mediumturquoise: "48d1cc",
      mediumvioletred: "c71585",
      midnightblue: "191970",
      mintcream: "f5fffa",
      mistyrose: "ffe4e1",
      moccasin: "ffe4b5",
      navajowhite: "ffdead",
      navy: "000080",
      oldlace: "fdf5e6",
      olive: "808000",
      olivedrab: "6b8e23",
      orange: "ffa500",
      orangered: "ff4500",
      orchid: "da70d6",
      palegoldenrod: "eee8aa",
      palegreen: "98fb98",
      paleturquoise: "afeeee",
      palevioletred: "db7093",
      papayawhip: "ffefd5",
      peachpuff: "ffdab9",
      peru: "cd853f",
      pink: "ffc0cb",
      plum: "dda0dd",
      powderblue: "b0e0e6",
      purple: "800080",
      rebeccapurple: "663399",
      red: "f00",
      rosybrown: "bc8f8f",
      royalblue: "4169e1",
      saddlebrown: "8b4513",
      salmon: "fa8072",
      sandybrown: "f4a460",
      seagreen: "2e8b57",
      seashell: "fff5ee",
      sienna: "a0522d",
      silver: "c0c0c0",
      skyblue: "87ceeb",
      slateblue: "6a5acd",
      slategray: "708090",
      slategrey: "708090",
      snow: "fffafa",
      springgreen: "00ff7f",
      steelblue: "4682b4",
      tan: "d2b48c",
      teal: "008080",
      thistle: "d8bfd8",
      tomato: "ff6347",
      turquoise: "40e0d0",
      violet: "ee82ee",
      wheat: "f5deb3",
      white: "fff",
      whitesmoke: "f5f5f5",
      yellow: "ff0",
      yellowgreen: "9acd32"
  };

  // Make it easy to access colors via hexNames[hex]
  var hexNames = tinycolor.hexNames = flip(names);

  // Utilities
  // ---------

  // { 'name1': 'val1' } becomes { 'val1': 'name1' }
  function flip(o) {
      var flipped = { };
      for (var i in o) {
          if (o.hasOwnProperty(i)) {
              flipped[o[i]] = i;
          }
      }
      return flipped;
  }

  // Return a valid alpha value [0,1] with all invalid values being set to 1
  function boundAlpha(a) {
      a = parseFloat(a);

      if (isNaN(a) || a < 0 || a > 1) {
          a = 1;
      }

      return a;
  }

  // Take input from [0, n] and return it as [0, 1]
  function bound01(n, max) {
      if (isOnePointZero(n)) { n = "100%"; }

      var processPercent = isPercentage(n);
      n = mathMin(max, mathMax(0, parseFloat(n)));

      // Automatically convert percentage into number
      if (processPercent) {
          n = parseInt(n * max, 10) / 100;
      }

      // Handle floating point rounding errors
      if ((Math.abs(n - max) < 0.000001)) {
          return 1;
      }

      // Convert into [0, 1] range if it isn't already
      return (n % max) / parseFloat(max);
  }

  // Force a number between 0 and 1
  function clamp01(val) {
      return mathMin(1, mathMax(0, val));
  }

  // Parse a base-16 hex value into a base-10 integer
  function parseIntFromHex(val) {
      return parseInt(val, 16);
  }

  // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
  // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
  function isOnePointZero(n) {
      return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
  }

  // Check to see if string passed in is a percentage
  function isPercentage(n) {
      return typeof n === "string" && n.indexOf('%') != -1;
  }

  // Force a hex value to have 2 characters
  function pad2(c) {
      return c.length == 1 ? '0' + c : '' + c;
  }

  // Replace a decimal with it's percentage value
  function convertToPercentage(n) {
      if (n <= 1) {
          n = (n * 100) + "%";
      }

      return n;
  }

  // Converts a decimal to a hex value
  function convertDecimalToHex(d) {
      return Math.round(parseFloat(d) * 255).toString(16);
  }
  // Converts a hex value to a decimal
  function convertHexToDecimal(h) {
      return (parseIntFromHex(h) / 255);
  }

  var matchers = (function() {

      // <http://www.w3.org/TR/css3-values/#integers>
      var CSS_INTEGER = "[-\\+]?\\d+%?";

      // <http://www.w3.org/TR/css3-values/#number-value>
      var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

      // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
      var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

      // Actual matching.
      // Parentheses and commas are optional, but not required.
      // Whitespace can take the place of commas or opening paren
      var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
      var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";

      return {
          CSS_UNIT: new RegExp(CSS_UNIT),
          rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
          rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
          hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
          hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
          hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
          hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
          hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
          hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
      };
  })();

  // isValidCSSUnit
  // Take in a single string / number and check to see if it looks like a CSS unit
  // (see matchers above for definition).
  function isValidCSSUnit(color) {
      return !!matchers.CSS_UNIT.exec(color);
  }

  // stringInputToObject
  // Permissive string parsing.  Take in a number of formats, and output an object
  // based on detected format.  Returns { r, g, b } or { h, s, l } or { h, s, v}
  function stringInputToObject(color) {

      color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();
      var named = false;
      if (names[color]) {
          color = names[color];
          named = true;
      }
      else if (color == 'transparent') {
          return { r: 0, g: 0, b: 0, a: 0, format: "name" };
      }

      // Try to match string input using regular expressions.
      // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
      // Just return an object and let the conversion functions handle that.
      // This way the result will be the same whether the tinycolor is initialized with string or object.
      var match;
      if ((match = matchers.rgb.exec(color))) {
          return { r: match[1], g: match[2], b: match[3] };
      }
      if ((match = matchers.rgba.exec(color))) {
          return { r: match[1], g: match[2], b: match[3], a: match[4] };
      }
      if ((match = matchers.hsl.exec(color))) {
          return { h: match[1], s: match[2], l: match[3] };
      }
      if ((match = matchers.hsla.exec(color))) {
          return { h: match[1], s: match[2], l: match[3], a: match[4] };
      }
      if ((match = matchers.hsv.exec(color))) {
          return { h: match[1], s: match[2], v: match[3] };
      }
      if ((match = matchers.hsva.exec(color))) {
          return { h: match[1], s: match[2], v: match[3], a: match[4] };
      }
      if ((match = matchers.hex8.exec(color))) {
          return {
              r: parseIntFromHex(match[1]),
              g: parseIntFromHex(match[2]),
              b: parseIntFromHex(match[3]),
              a: convertHexToDecimal(match[4]),
              format: named ? "name" : "hex8"
          };
      }
      if ((match = matchers.hex6.exec(color))) {
          return {
              r: parseIntFromHex(match[1]),
              g: parseIntFromHex(match[2]),
              b: parseIntFromHex(match[3]),
              format: named ? "name" : "hex"
          };
      }
      if ((match = matchers.hex4.exec(color))) {
          return {
              r: parseIntFromHex(match[1] + '' + match[1]),
              g: parseIntFromHex(match[2] + '' + match[2]),
              b: parseIntFromHex(match[3] + '' + match[3]),
              a: convertHexToDecimal(match[4] + '' + match[4]),
              format: named ? "name" : "hex8"
          };
      }
      if ((match = matchers.hex3.exec(color))) {
          return {
              r: parseIntFromHex(match[1] + '' + match[1]),
              g: parseIntFromHex(match[2] + '' + match[2]),
              b: parseIntFromHex(match[3] + '' + match[3]),
              format: named ? "name" : "hex"
          };
      }

      return false;
  }

  function validateWCAG2Parms(parms) {
      // return valid WCAG2 parms for isReadable.
      // If input parms are invalid, return {"level":"AA", "size":"small"}
      var level, size;
      parms = parms || {"level":"AA", "size":"small"};
      level = (parms.level || "AA").toUpperCase();
      size = (parms.size || "small").toLowerCase();
      if (level !== "AA" && level !== "AAA") {
          level = "AA";
      }
      if (size !== "small" && size !== "large") {
          size = "small";
      }
      return {"level":level, "size":size};
  }

  this.tinycolor = tinycolor;

  })()`;
  }
  // It is hacky way to make this function will be compiled preferentially by less
  // resolve error: `ReferenceError: colorPalette is not defined`
  // https://github.com/ant-design/ant-motion/issues/44
  .tinyColorMixin();

// We create a very complex algorithm which take the place of original tint/shade color system
// to make sure no one can understand it 👻
// and create an entire color palette magicly by inputing just a single primary color.
// We are using bezier-curve easing function and some color manipulations like tint/shade/darken/spin
.colorPaletteMixin() {
  @functions: ~`(function() {
    var hueStep = 2;
    var saturationStep = 0.16;
    var saturationStep2 = 0.05;
    var brightnessStep1 = 0.05;
    var brightnessStep2 = 0.15;
    var lightColorCount = 5;
    var darkColorCount = 4;

    var getHue = function(hsv, i, isLight) {
      var hue;
      if (hsv.h >= 60 && hsv.h <= 240) {
        hue = isLight ? hsv.h - hueStep * i : hsv.h + hueStep * i;
      } else {
        hue = isLight ? hsv.h + hueStep * i : hsv.h - hueStep * i;
      }
      if (hue < 0) {
        hue += 360;
      } else if (hue >= 360) {
        hue -= 360;
      }
      return Math.round(hue);
    };
    var getSaturation = function(hsv, i, isLight) {
      var saturation;
      if (isLight) {
        saturation = hsv.s - saturationStep * i;
      } else if (i === darkColorCount) {
        saturation = hsv.s + saturationStep;
      } else {
        saturation = hsv.s + saturationStep2 * i;
      }
      if (saturation > 1) {
        saturation = 1;
      }
      if (isLight && i === lightColorCount && saturation > 0.1) {
        saturation = 0.1;
      }
      if (saturation < 0.06) {
        saturation = 0.06;
      }
      return Number(saturation.toFixed(2));
    };
    var getValue = function(hsv, i, isLight) {
      var value;
      if (isLight) {
        value = hsv.v + brightnessStep1 * i;
      }else{
        value = hsv.v - brightnessStep2 * i
      }
      if (value > 1) {
        value = 1;
      }
      return Number(value.toFixed(2))
    };

    this.colorPalette = function(color, index) {
      var isLight = index <= 6;
      var hsv = tinycolor(color).toHsv();
      var i = isLight ? lightColorCount + 1 - index : index - lightColorCount - 1;
      return tinycolor({
        h: getHue(hsv, i, isLight),
        s: getSaturation(hsv, i, isLight),
        v: getValue(hsv, i, isLight),
      }).toHexString();
    };
  })()`;
  }
  // It is hacky way to make this function will be compiled preferentially by less
  // resolve error: `ReferenceError: colorPalette is not defined`
  // https://github.com/ant-design/ant-motion/issues/44
  .colorPaletteMixin();
// color palettes
@blue-base: #1890ff;
@blue-1: color(~`colorPalette("@{blue-6}", 1) `);
@blue-2: color(~`colorPalette("@{blue-6}", 2) `);
@blue-3: color(~`colorPalette("@{blue-6}", 3) `);
@blue-4: color(~`colorPalette("@{blue-6}", 4) `);
@blue-5: color(~`colorPalette("@{blue-6}", 5) `);
@blue-6: @blue-base;
@blue-7: color(~`colorPalette("@{blue-6}", 7) `);
@blue-8: color(~`colorPalette("@{blue-6}", 8) `);
@blue-9: color(~`colorPalette("@{blue-6}", 9) `);
@blue-10: color(~`colorPalette("@{blue-6}", 10) `);

@purple-base: #722ed1;
@purple-1: color(~`colorPalette("@{purple-6}", 1) `);
@purple-2: color(~`colorPalette("@{purple-6}", 2) `);
@purple-3: color(~`colorPalette("@{purple-6}", 3) `);
@purple-4: color(~`colorPalette("@{purple-6}", 4) `);
@purple-5: color(~`colorPalette("@{purple-6}", 5) `);
@purple-6: @purple-base;
@purple-7: color(~`colorPalette("@{purple-6}", 7) `);
@purple-8: color(~`colorPalette("@{purple-6}", 8) `);
@purple-9: color(~`colorPalette("@{purple-6}", 9) `);
@purple-10: color(~`colorPalette("@{purple-6}", 10) `);

@cyan-base: #13c2c2;
@cyan-1: color(~`colorPalette("@{cyan-6}", 1) `);
@cyan-2: color(~`colorPalette("@{cyan-6}", 2) `);
@cyan-3: color(~`colorPalette("@{cyan-6}", 3) `);
@cyan-4: color(~`colorPalette("@{cyan-6}", 4) `);
@cyan-5: color(~`colorPalette("@{cyan-6}", 5) `);
@cyan-6: @cyan-base;
@cyan-7: color(~`colorPalette("@{cyan-6}", 7) `);
@cyan-8: color(~`colorPalette("@{cyan-6}", 8) `);
@cyan-9: color(~`colorPalette("@{cyan-6}", 9) `);
@cyan-10: color(~`colorPalette("@{cyan-6}", 10) `);

@green-base: #52c41a;
@green-1: color(~`colorPalette("@{green-6}", 1) `);
@green-2: color(~`colorPalette("@{green-6}", 2) `);
@green-3: color(~`colorPalette("@{green-6}", 3) `);
@green-4: color(~`colorPalette("@{green-6}", 4) `);
@green-5: color(~`colorPalette("@{green-6}", 5) `);
@green-6: @green-base;
@green-7: color(~`colorPalette("@{green-6}", 7) `);
@green-8: color(~`colorPalette("@{green-6}", 8) `);
@green-9: color(~`colorPalette("@{green-6}", 9) `);
@green-10: color(~`colorPalette("@{green-6}", 10) `);

@magenta-base: #eb2f96;
@magenta-1: color(~`colorPalette("@{magenta-6}", 1) `);
@magenta-2: color(~`colorPalette("@{magenta-6}", 2) `);
@magenta-3: color(~`colorPalette("@{magenta-6}", 3) `);
@magenta-4: color(~`colorPalette("@{magenta-6}", 4) `);
@magenta-5: color(~`colorPalette("@{magenta-6}", 5) `);
@magenta-6: @magenta-base;
@magenta-7: color(~`colorPalette("@{magenta-6}", 7) `);
@magenta-8: color(~`colorPalette("@{magenta-6}", 8) `);
@magenta-9: color(~`colorPalette("@{magenta-6}", 9) `);
@magenta-10: color(~`colorPalette("@{magenta-6}", 10) `);

// alias of magenta
@pink-base: #eb2f96;
@pink-1: color(~`colorPalette("@{pink-6}", 1) `);
@pink-2: color(~`colorPalette("@{pink-6}", 2) `);
@pink-3: color(~`colorPalette("@{pink-6}", 3) `);
@pink-4: color(~`colorPalette("@{pink-6}", 4) `);
@pink-5: color(~`colorPalette("@{pink-6}", 5) `);
@pink-6: @pink-base;
@pink-7: color(~`colorPalette("@{pink-6}", 7) `);
@pink-8: color(~`colorPalette("@{pink-6}", 8) `);
@pink-9: color(~`colorPalette("@{pink-6}", 9) `);
@pink-10: color(~`colorPalette("@{pink-6}", 10) `);

@red-base: #f5222d;
@red-1: color(~`colorPalette("@{red-6}", 1) `);
@red-2: color(~`colorPalette("@{red-6}", 2) `);
@red-3: color(~`colorPalette("@{red-6}", 3) `);
@red-4: color(~`colorPalette("@{red-6}", 4) `);
@red-5: color(~`colorPalette("@{red-6}", 5) `);
@red-6: @red-base;
@red-7: color(~`colorPalette("@{red-6}", 7) `);
@red-8: color(~`colorPalette("@{red-6}", 8) `);
@red-9: color(~`colorPalette("@{red-6}", 9) `);
@red-10: color(~`colorPalette("@{red-6}", 10) `);

@orange-base: #fa8c16;
@orange-1: color(~`colorPalette("@{orange-6}", 1) `);
@orange-2: color(~`colorPalette("@{orange-6}", 2) `);
@orange-3: color(~`colorPalette("@{orange-6}", 3) `);
@orange-4: color(~`colorPalette("@{orange-6}", 4) `);
@orange-5: color(~`colorPalette("@{orange-6}", 5) `);
@orange-6: @orange-base;
@orange-7: color(~`colorPalette("@{orange-6}", 7) `);
@orange-8: color(~`colorPalette("@{orange-6}", 8) `);
@orange-9: color(~`colorPalette("@{orange-6}", 9) `);
@orange-10: color(~`colorPalette("@{orange-6}", 10) `);

@yellow-base: #fadb14;
@yellow-1: color(~`colorPalette("@{yellow-6}", 1) `);
@yellow-2: color(~`colorPalette("@{yellow-6}", 2) `);
@yellow-3: color(~`colorPalette("@{yellow-6}", 3) `);
@yellow-4: color(~`colorPalette("@{yellow-6}", 4) `);
@yellow-5: color(~`colorPalette("@{yellow-6}", 5) `);
@yellow-6: @yellow-base;
@yellow-7: color(~`colorPalette("@{yellow-6}", 7) `);
@yellow-8: color(~`colorPalette("@{yellow-6}", 8) `);
@yellow-9: color(~`colorPalette("@{yellow-6}", 9) `);
@yellow-10: color(~`colorPalette("@{yellow-6}", 10) `);

@volcano-base: #fa541c;
@volcano-1: color(~`colorPalette("@{volcano-6}", 1) `);
@volcano-2: color(~`colorPalette("@{volcano-6}", 2) `);
@volcano-3: color(~`colorPalette("@{volcano-6}", 3) `);
@volcano-4: color(~`colorPalette("@{volcano-6}", 4) `);
@volcano-5: color(~`colorPalette("@{volcano-6}", 5) `);
@volcano-6: @volcano-base;
@volcano-7: color(~`colorPalette("@{volcano-6}", 7) `);
@volcano-8: color(~`colorPalette("@{volcano-6}", 8) `);
@volcano-9: color(~`colorPalette("@{volcano-6}", 9) `);
@volcano-10: color(~`colorPalette("@{volcano-6}", 10) `);

@geekblue-base: #2f54eb;
@geekblue-1: color(~`colorPalette("@{geekblue-6}", 1) `);
@geekblue-2: color(~`colorPalette("@{geekblue-6}", 2) `);
@geekblue-3: color(~`colorPalette("@{geekblue-6}", 3) `);
@geekblue-4: color(~`colorPalette("@{geekblue-6}", 4) `);
@geekblue-5: color(~`colorPalette("@{geekblue-6}", 5) `);
@geekblue-6: @geekblue-base;
@geekblue-7: color(~`colorPalette("@{geekblue-6}", 7) `);
@geekblue-8: color(~`colorPalette("@{geekblue-6}", 8) `);
@geekblue-9: color(~`colorPalette("@{geekblue-6}", 9) `);
@geekblue-10: color(~`colorPalette("@{geekblue-6}", 10) `);

@lime-base: #a0d911;
@lime-1: color(~`colorPalette("@{lime-6}", 1) `);
@lime-2: color(~`colorPalette("@{lime-6}", 2) `);
@lime-3: color(~`colorPalette("@{lime-6}", 3) `);
@lime-4: color(~`colorPalette("@{lime-6}", 4) `);
@lime-5: color(~`colorPalette("@{lime-6}", 5) `);
@lime-6: @lime-base;
@lime-7: color(~`colorPalette("@{lime-6}", 7) `);
@lime-8: color(~`colorPalette("@{lime-6}", 8) `);
@lime-9: color(~`colorPalette("@{lime-6}", 9) `);
@lime-10: color(~`colorPalette("@{lime-6}", 10) `);

@gold-base: #faad14;
@gold-1: color(~`colorPalette("@{gold-6}", 1) `);
@gold-2: color(~`colorPalette("@{gold-6}", 2) `);
@gold-3: color(~`colorPalette("@{gold-6}", 3) `);
@gold-4: color(~`colorPalette("@{gold-6}", 4) `);
@gold-5: color(~`colorPalette("@{gold-6}", 5) `);
@gold-6: @gold-base;
@gold-7: color(~`colorPalette("@{gold-6}", 7) `);
@gold-8: color(~`colorPalette("@{gold-6}", 8) `);
@gold-9: color(~`colorPalette("@{gold-6}", 9) `);
@gold-10: color(~`colorPalette("@{gold-6}", 10) `);

@preset-colors: pink, magenta, red, volcano, orange, yellow, gold, cyan, lime,
  green, blue, geekblue, purple;

  @theme: default;

  // The prefix to use on all css classes from ant.
  @ant-prefix: ant;

  // An override for the html selector for theme prefixes
  @html-selector: html;

  // -------- Colors -----------
  @primary-color: @blue-6;
  @info-color: @primary-color;
  @success-color: @green-6;
  @processing-color: @blue-6;
  @error-color: @red-5;
  @highlight-color: @red-5;
  @warning-color: @gold-6;
  @normal-color: #d9d9d9;
  @white: #fff;
  @black: #000;

  // Color used by default to control hover and active backgrounds and for
  // alert info backgrounds.
  @primary-1: color(
    ~`colorPalette("@{primary-color}", 1) `
  ); // replace tint(@primary-color, 90%)
  @primary-2: color(
    ~`colorPalette("@{primary-color}", 2) `
  ); // replace tint(@primary-color, 80%)
  @primary-3: color(~`colorPalette("@{primary-color}", 3) `); // unused
  @primary-4: color(~`colorPalette("@{primary-color}", 4) `); // unused
  @primary-5: color(
    ~`colorPalette("@{primary-color}", 5) `
  ); // color used to control the text color in many active and hover states, replace tint(@primary-color, 20%)
  @primary-6: @primary-color; // color used to control the text color of active buttons, don't use, use @primary-color
  @primary-7: color(
    ~`colorPalette("@{primary-color}", 7) `
  ); // replace shade(@primary-color, 5%)
  @primary-8: color(~`colorPalette("@{primary-color}", 8) `); // unused
  @primary-9: color(~`colorPalette("@{primary-color}", 9) `); // unused
  @primary-10: color(~`colorPalette("@{primary-color}", 10) `); // unused

  // Base Scaffolding Variables
  // ---

  // Background color for `<body>`
  @body-background: #fff;
  // Base background color for most components
  @component-background: #fff;
  // Popover background color
  @popover-background: @component-background;
  @popover-customize-border-color: @border-color-split;
  @font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji",
    "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  @code-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier,
    monospace;
  @text-color: fade(@black, 85%);
  @text-color-secondary: fade(@black, 45%);
  @text-color-inverse: @white;
  @icon-color: inherit;
  @icon-color-hover: fade(@black, 75%);
  @heading-color: fade(@black, 85%);
  @text-color-dark: fade(@white, 85%);
  @text-color-secondary-dark: fade(@white, 65%);
  @text-selection-bg: @primary-color;
  @font-variant-base: tabular-nums;
  @font-feature-settings-base: "tnum";
  @font-size-base: 14px;
  @font-size-lg: @font-size-base + 2px;
  @font-size-sm: 12px;
  @heading-1-size: ceil(@font-size-base * 2.71);
  @heading-2-size: ceil(@font-size-base * 2.14);
  @heading-3-size: ceil(@font-size-base * 1.71);
  @heading-4-size: ceil(@font-size-base * 1.42);
  @heading-5-size: ceil(@font-size-base * 1.14);
  // https://github.com/ant-design/ant-design/issues/20210
  @line-height-base: 1.5715;
  @border-radius-base: 2px;
  @border-radius-sm: @border-radius-base;

  // vertical paddings
  @padding-lg: 24px; // containers
  @padding-md: 16px; // small containers and buttons
  @padding-sm: 12px; // Form controls and items
  @padding-xs: 8px; // small items
  @padding-xss: 4px; // more small

  // vertical padding for all form controls
  @control-padding-horizontal: @padding-sm;
  @control-padding-horizontal-sm: @padding-xs;

  // vertical margins
  @margin-lg: 24px; // containers
  @margin-md: 16px; // small containers and buttons
  @margin-sm: 12px; // Form controls and items
  @margin-xs: 8px; // small items
  @margin-xss: 4px; // more small

  // height rules
  @height-base: 32px;
  @height-lg: 40px;
  @height-sm: 24px;

  // The background colors for active and hover states for things like
  // list items or table cells.
  @item-active-bg: @primary-1;
  @item-hover-bg: #f5f5f5;

  // ICONFONT
  @iconfont-css-prefix: anticon;

  // LINK
  @link-color: @primary-color;
  @link-hover-color: color(~`colorPalette("@{link-color}", 5) `);
  @link-active-color: color(~`colorPalette("@{link-color}", 7) `);
  @link-decoration: none;
  @link-hover-decoration: none;
  @link-focus-decoration: none;
  @link-focus-outline: 0;

  // Animation
  @ease-base-out: cubic-bezier(0.7, 0.3, 0.1, 1);
  @ease-base-in: cubic-bezier(0.9, 0, 0.3, 0.7);
  @ease-out: cubic-bezier(0.215, 0.61, 0.355, 1);
  @ease-in: cubic-bezier(0.55, 0.055, 0.675, 0.19);
  @ease-in-out: cubic-bezier(0.645, 0.045, 0.355, 1);
  @ease-out-back: cubic-bezier(0.12, 0.4, 0.29, 1.46);
  @ease-in-back: cubic-bezier(0.71, -0.46, 0.88, 0.6);
  @ease-in-out-back: cubic-bezier(0.71, -0.46, 0.29, 1.46);
  @ease-out-circ: cubic-bezier(0.08, 0.82, 0.17, 1);
  @ease-in-circ: cubic-bezier(0.6, 0.04, 0.98, 0.34);
  @ease-in-out-circ: cubic-bezier(0.78, 0.14, 0.15, 0.86);
  @ease-out-quint: cubic-bezier(0.23, 1, 0.32, 1);
  @ease-in-quint: cubic-bezier(0.755, 0.05, 0.855, 0.06);
  @ease-in-out-quint: cubic-bezier(0.86, 0, 0.07, 1);

  // Border color
  @border-color-base: hsv(0, 0, 85%); // base border outline a component
  @border-color-split: hsv(0, 0, 94%); // split border inside a component
  @border-color-inverse: @white;
  @border-width-base: 1px; // width of the border for a component
  @border-style-base: solid; // style of a components border

  // Outline
  @outline-blur-size: 0;
  @outline-width: 2px;
  @outline-color: @primary-color;
  @outline-fade: 20%;

  @background-color-light: hsv(
    0,
    0,
    98%
  ); // background of header and selected item
  @background-color-base: hsv(0, 0, 96%); // Default grey background color

  // Disabled states
  @disabled-color: fade(#000, 25%);
  @disabled-bg: @background-color-base;
  @disabled-color-dark: fade(#fff, 35%);

  // Shadow
  @shadow-color: rgba(0, 0, 0, 0.15);
  @shadow-color-inverse: @component-background;
  @box-shadow-base: @shadow-2;
  @shadow-1-up: 0 -6px 16px -8px rgba(0, 0, 0, 0.08),
    0 -9px 28px 0 rgba(0, 0, 0, 0.05), 0 -12px 48px 16px rgba(0, 0, 0, 0.03);
  @shadow-1-down: 0 6px 16px -8px rgba(0, 0, 0, 0.08),
    0 9px 28px 0 rgba(0, 0, 0, 0.05), 0 12px 48px 16px rgba(0, 0, 0, 0.03);
  @shadow-1-left: -6px 0 16px -8px rgba(0, 0, 0, 0.08),
    -9px 0 28px 0 rgba(0, 0, 0, 0.05), -12px 0 48px 16px rgba(0, 0, 0, 0.03);
  @shadow-1-right: 6px 0 16px -8px rgba(0, 0, 0, 0.08),
    9px 0 28px 0 rgba(0, 0, 0, 0.05), 12px 0 48px 16px rgba(0, 0, 0, 0.03);
  @shadow-2: 0 3px 6px -4px rgba(0, 0, 0, 0.12), 0 6px 16px 0 rgba(0, 0, 0, 0.08),
    0 9px 28px 8px rgba(0, 0, 0, 0.05);

  // Buttons
  @btn-font-weight: 400;
  @btn-border-radius-base: @border-radius-base;
  @btn-border-radius-sm: @border-radius-base;
  @btn-border-width: @border-width-base;
  @btn-border-style: @border-style-base;
  @btn-shadow: 0 2px 0 rgba(0, 0, 0, 0.015);
  @btn-primary-shadow: 0 2px 0 rgba(0, 0, 0, 0.045);
  @btn-text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.12);

  @btn-primary-color: #fff;
  @btn-primary-bg: @primary-color;

  @btn-default-color: @text-color;
  @btn-default-bg: @component-background;
  @btn-default-border: @border-color-base;

  @btn-danger-color: #fff;
  @btn-danger-bg: @error-color;
  @btn-danger-border: @error-color;

  @btn-disable-color: @disabled-color;
  @btn-disable-bg: @disabled-bg;
  @btn-disable-border: @border-color-base;

  @btn-default-ghost-color: @component-background;
  @btn-default-ghost-bg: transparent;
  @btn-default-ghost-border: @component-background;

  @btn-font-size-lg: @font-size-lg;
  @btn-font-size-sm: @font-size-base;
  @btn-padding-horizontal-base: @padding-md - 1px;
  @btn-padding-horizontal-lg: @btn-padding-horizontal-base;
  @btn-padding-horizontal-sm: @padding-xs - 1px;

  @btn-height-base: @height-base;
  @btn-height-lg: @height-lg;
  @btn-height-sm: @height-sm;

  @btn-line-height: @line-height-base;

  @btn-circle-size: @btn-height-base;
  @btn-circle-size-lg: @btn-height-lg;
  @btn-circle-size-sm: @btn-height-sm;

  @btn-square-size: @btn-height-base;
  @btn-square-size-lg: @btn-height-lg;
  @btn-square-size-sm: @btn-height-sm;
  @btn-square-only-icon-size: @font-size-base + 2px;
  @btn-square-only-icon-size-sm: @font-size-base;
  @btn-square-only-icon-size-lg: @btn-font-size-lg + 2px;

  @btn-group-border: @primary-5;

  @btn-link-hover-bg: transparent;
  @btn-text-hover-bg: rgba(0, 0, 0, 0.018);

  // Checkbox
  @checkbox-size: 16px;
  @checkbox-color: @primary-color;
  @checkbox-check-color: #fff;
  @checkbox-check-bg: @checkbox-check-color;
  @checkbox-border-width: @border-width-base;
  @checkbox-group-item-margin-right: 8px;

  // Descriptions
  @descriptions-bg: #fafafa;
  @descriptions-title-margin-bottom: 20px;
  @descriptions-default-padding: @padding-md @padding-lg;
  @descriptions-middle-padding: @padding-sm @padding-lg;
  @descriptions-small-padding: @padding-xs @padding-md;
  @descriptions-item-padding-bottom: @padding-md;
  @descriptions-item-trailing-colon: true;
  @descriptions-item-label-colon-margin-right: 8px;
  @descriptions-item-label-colon-margin-left: 2px;
  @descriptions-extra-color: @text-color;

  // Divider
  @divider-text-padding: 1em;
  @divider-orientation-margin: 5%;
  @divider-color: rgba(0, 0, 0, 6%);

  // Dropdown
  @dropdown-selected-color: @primary-color;
  @dropdown-menu-submenu-disabled-bg: @component-background;

  // Empty
  @empty-font-size: @font-size-base;

  // Radio
  @radio-size: 16px;
  @radio-top: 0px;
  @radio-border-width: 1px;
  @radio-dot-size: @radio-size - 8px;
  @radio-dot-color: @primary-color;
  @radio-dot-disabled-color: fade(@black, 20%);
  @radio-solid-checked-color: @component-background;

  // Radio buttons
  @radio-button-bg: @btn-default-bg;
  @radio-button-checked-bg: @btn-default-bg;
  @radio-button-color: @btn-default-color;
  @radio-button-hover-color: @primary-5;
  @radio-button-active-color: @primary-7;
  @radio-disabled-button-checked-bg: tint(@black, 90%);
  @radio-disabled-button-checked-color: @disabled-color;
  @radio-wrapper-margin-right: 8px;

  // Media queries breakpoints
  // @screen-xs and @screen-xs-min is not used in Grid
  // smallest break point is @screen-md
  @screen-xs: 480px;
  @screen-xs-min: @screen-xs;
  // 👆 Extra small screen / phone

  // 👇 Small screen / tablet
  @screen-sm: 576px;
  @screen-sm-min: @screen-sm;

  // Medium screen / desktop
  @screen-md: 768px;
  @screen-md-min: @screen-md;

  // Large screen / wide desktop
  @screen-lg: 992px;
  @screen-lg-min: @screen-lg;

  // Extra large screen / full hd
  @screen-xl: 1200px;
  @screen-xl-min: @screen-xl;

  // Extra extra large screen / large desktop
  @screen-xxl: 1600px;
  @screen-xxl-min: @screen-xxl;

  // provide a maximum
  @screen-xs-max: (@screen-sm-min - 1px);
  @screen-sm-max: (@screen-md-min - 1px);
  @screen-md-max: (@screen-lg-min - 1px);
  @screen-lg-max: (@screen-xl-min - 1px);
  @screen-xl-max: (@screen-xxl-min - 1px);

  // Grid system
  @grid-columns: 24;

  // Layout
  @layout-body-background: #f0f2f5;
  @layout-header-background: #001529;
  @layout-header-height: 64px;
  @layout-header-padding: 0 50px;
  @layout-header-color: @text-color;
  @layout-footer-padding: 24px 50px;
  @layout-footer-background: @layout-body-background;
  @layout-sider-background: @layout-header-background;
  @layout-trigger-height: 48px;
  @layout-trigger-background: #002140;
  @layout-trigger-color: #fff;
  @layout-zero-trigger-width: 36px;
  @layout-zero-trigger-height: 42px;
  // Layout light theme
  @layout-sider-background-light: #fff;
  @layout-trigger-background-light: #fff;
  @layout-trigger-color-light: @text-color;

  // z-index list, order by `z-index`
  @zindex-badge: auto;
  @zindex-table-fixed: 2;
  @zindex-affix: 10;
  @zindex-back-top: 10;
  @zindex-picker-panel: 10;
  @zindex-popup-close: 10;
  @zindex-modal: 1000;
  @zindex-modal-mask: 1000;
  @zindex-message: 1010;
  @zindex-notification: 1010;
  @zindex-popover: 1030;
  @zindex-dropdown: 1050;
  @zindex-picker: 1050;
  @zindex-popoconfirm: 1060;
  @zindex-tooltip: 1070;
  @zindex-image: 1080;

  // Animation
  @animation-duration-slow: 0.3s; // Modal
  @animation-duration-base: 0.2s;
  @animation-duration-fast: 0.1s; // Tooltip

  //CollapsePanel
  @collapse-panel-border-radius: @border-radius-base;

  //Dropdown
  @dropdown-menu-bg: @component-background;
  @dropdown-vertical-padding: 5px;
  @dropdown-edge-child-vertical-padding: 4px;
  @dropdown-font-size: @font-size-base;
  @dropdown-line-height: 22px;

  // Form
  // ---
  @label-required-color: @highlight-color;
  @label-color: @heading-color;
  @form-warning-input-bg: @input-bg;
  @form-item-margin-bottom: 24px;
  @form-item-trailing-colon: true;
  @form-vertical-label-padding: 0 0 8px;
  @form-vertical-label-margin: 0;
  @form-item-label-font-size: @font-size-base;
  @form-item-label-height: @input-height-base;
  @form-item-label-colon-margin-right: 8px;
  @form-item-label-colon-margin-left: 2px;
  @form-error-input-bg: @input-bg;

  // Input
  // ---
  @input-height-base: @height-base;
  @input-height-lg: @height-lg;
  @input-height-sm: @height-sm;
  @input-padding-horizontal: @control-padding-horizontal - 1px;
  @input-padding-horizontal-base: @input-padding-horizontal;
  @input-padding-horizontal-sm: @control-padding-horizontal-sm - 1px;
  @input-padding-horizontal-lg: @input-padding-horizontal;
  @input-padding-vertical-base: max(
    (
        round(
            ((@input-height-base - @font-size-base * @line-height-base) / 2) * 10
          ) / 10
      ) - @border-width-base,
    3px
  );
  @input-padding-vertical-sm: max(
    (
        round(((@input-height-sm - @font-size-base * @line-height-base) / 2) * 10) /
          10
      ) - @border-width-base,
    0
  );
  @input-padding-vertical-lg: (
      ceil(((@input-height-lg - @font-size-lg * @line-height-base) / 2) * 10) / 10
    ) - @border-width-base;
  @input-placeholder-color: hsv(0, 0, 75%);
  @input-color: @text-color;
  @input-icon-color: @input-color;
  @input-border-color: @border-color-base;
  @input-bg: @component-background;
  @input-number-hover-border-color: @input-hover-border-color;
  @input-number-handler-active-bg: #f4f4f4;
  @input-number-handler-hover-bg: @primary-5;
  @input-number-handler-bg: @component-background;
  @input-number-handler-border-color: @border-color-base;
  @input-addon-bg: @background-color-light;
  @input-hover-border-color: @primary-5;
  @input-disabled-bg: @disabled-bg;
  @input-outline-offset: 0 0;
  @input-icon-hover-color: fade(@black, 85%);
  @input-disabled-color: @disabled-color;

  // Mentions
  // ---
  @mentions-dropdown-bg: @component-background;
  @mentions-dropdown-menu-item-hover-bg: @mentions-dropdown-bg;

  // Select
  // ---
  @select-border-color: @border-color-base;
  @select-item-selected-color: @text-color;
  @select-item-selected-font-weight: 600;
  @select-dropdown-bg: @component-background;
  @select-item-selected-bg: @primary-1;
  @select-item-active-bg: @item-hover-bg;
  @select-dropdown-vertical-padding: @dropdown-vertical-padding;
  @select-dropdown-font-size: @dropdown-font-size;
  @select-dropdown-line-height: @dropdown-line-height;
  @select-dropdown-height: 32px;
  @select-background: @component-background;
  @select-clear-background: @select-background;
  @select-selection-item-bg: @background-color-base;
  @select-selection-item-border-color: @border-color-split;
  @select-single-item-height-lg: 40px;
  @select-multiple-item-height: @input-height-base - @input-padding-vertical-base *
    2; // Normal 24px
  @select-multiple-item-height-lg: 32px;
  @select-multiple-item-spacing-half: ceil((@input-padding-vertical-base / 2));
  @select-multiple-disabled-background: @input-disabled-bg;
  @select-multiple-item-disabled-color: #bfbfbf;
  @select-multiple-item-disabled-border-color: @select-border-color;

  // Cascader
  // ---
  @cascader-bg: @component-background;
  @cascader-item-selected-bg: @primary-1;
  @cascader-menu-bg: @component-background;
  @cascader-menu-border-color-split: @border-color-split;

  // Cascader
  // ----
  @cascader-dropdown-vertical-padding: @dropdown-vertical-padding;
  @cascader-dropdown-edge-child-vertical-padding: @dropdown-edge-child-vertical-padding;
  @cascader-dropdown-font-size: @dropdown-font-size;
  @cascader-dropdown-line-height: @dropdown-line-height;

  // Anchor
  // ---
  @anchor-bg: @component-background;
  @anchor-border-color: @border-color-split;
  @anchor-link-top: 7px;
  @anchor-link-left: 16px;
  @anchor-link-padding: @anchor-link-top 0 @anchor-link-top @anchor-link-left;

  // Tooltip
  // ---
  // Tooltip max width
  @tooltip-max-width: 250px;
  // Tooltip text color
  @tooltip-color: #fff;
  // Tooltip background color
  @tooltip-bg: rgba(0, 0, 0, 0.75);
  // Tooltip arrow width
  @tooltip-arrow-width: 5px;
  // Tooltip distance with trigger
  @tooltip-distance: @tooltip-arrow-width - 1px + 4px;
  // Tooltip arrow color
  @tooltip-arrow-color: @tooltip-bg;

  // Popover
  // ---
  // Popover body background color
  @popover-bg: @component-background;
  // Popover text color
  @popover-color: @text-color;
  // Popover maximum width
  @popover-min-width: 177px;
  @popover-min-height: 32px;
  // Popover arrow width
  @popover-arrow-width: 6px;
  // Popover arrow color
  @popover-arrow-color: @popover-bg;
  // Popover outer arrow width
  // Popover outer arrow color
  @popover-arrow-outer-color: @popover-bg;
  // Popover distance with trigger
  @popover-distance: @popover-arrow-width + 4px;
  @popover-padding-horizontal: @padding-md;

  // Modal
  // --
  @modal-header-padding-vertical: @padding-md;
  @modal-header-padding-horizontal: @padding-lg;
  @modal-body-padding: @padding-lg;
  @modal-header-bg: @component-background;
  @modal-header-padding: @modal-header-padding-vertical
    @modal-header-padding-horizontal;
  @modal-header-border-width: @border-width-base;
  @modal-header-border-style: @border-style-base;
  @modal-header-title-line-height: 22px;
  @modal-header-title-font-size: @font-size-lg;
  @modal-header-border-color-split: @border-color-split;
  @modal-header-close-size: 56px;
  @modal-content-bg: @component-background;
  @modal-heading-color: @heading-color;
  @modal-close-color: @text-color-secondary;
  @modal-footer-bg: transparent;
  @modal-footer-border-color-split: @border-color-split;
  @modal-footer-border-style: @border-style-base;
  @modal-footer-padding-vertical: 10px;
  @modal-footer-padding-horizontal: 16px;
  @modal-footer-border-width: @border-width-base;
  @modal-mask-bg: fade(@black, 45%);
  @modal-confirm-body-padding: 32px 32px 24px;

  // Progress
  // --
  @progress-default-color: @processing-color;
  @progress-remaining-color: @background-color-base;
  @progress-text-color: @text-color;
  @progress-radius: 100px;
  @progress-steps-item-bg: #f3f3f3;
  @progress-text-font-size: 1em;
  @progress-circle-text-font-size: 1em;
  // Menu
  // ---
  @menu-inline-toplevel-item-height: 40px;
  @menu-item-height: 40px;
  @menu-item-group-height: @line-height-base;
  @menu-collapsed-width: 80px;
  @menu-bg: @component-background;
  @menu-popup-bg: @component-background;
  @menu-item-color: @text-color;
  @menu-highlight-color: @primary-color;
  @menu-highlight-danger-color: @error-color;
  @menu-item-active-bg: @primary-1;
  @menu-item-active-danger-bg: @red-1;
  @menu-item-active-border-width: 3px;
  @menu-item-group-title-color: @text-color-secondary;
  @menu-item-vertical-margin: 4px;
  @menu-item-font-size: @font-size-base;
  @menu-item-boundary-margin: 8px;
  @menu-item-padding: 0 20px;
  @menu-horizontal-line-height: 46px;
  @menu-icon-margin-right: 10px;
  @menu-icon-size: @menu-item-font-size;
  @menu-icon-size-lg: @font-size-lg;
  @menu-item-group-title-font-size: @menu-item-font-size;

  // dark theme
  @menu-dark-color: @text-color-secondary-dark;
  @menu-dark-danger-color: @error-color;
  @menu-dark-bg: @layout-header-background;
  @menu-dark-arrow-color: #fff;
  @menu-dark-submenu-bg: #000c17;
  @menu-dark-highlight-color: #fff;
  @menu-dark-item-active-bg: @primary-color;
  @menu-dark-item-active-danger-bg: @error-color;
  @menu-dark-selected-item-icon-color: @white;
  @menu-dark-selected-item-text-color: @white;
  @menu-dark-item-hover-bg: transparent;
  // Spin
  // ---
  @spin-dot-size-sm: 14px;
  @spin-dot-size: 20px;
  @spin-dot-size-lg: 32px;

  // Table
  // --
  @table-bg: @component-background;
  @table-header-bg: @background-color-light;
  @table-header-color: @heading-color;
  @table-header-sort-bg: @background-color-base;
  @table-body-sort-bg: #fafafa;
  @table-row-hover-bg: @background-color-light;
  @table-selected-row-color: inherit;
  @table-selected-row-bg: @primary-1;
  @table-body-selected-sort-bg: @table-selected-row-bg;
  @table-selected-row-hover-bg: darken(@table-selected-row-bg, 2%);
  @table-expanded-row-bg: #fbfbfb;
  @table-padding-vertical: 16px;
  @table-padding-horizontal: 16px;
  @table-padding-vertical-md: (@table-padding-vertical * 3 / 4);
  @table-padding-horizontal-md: (@table-padding-horizontal / 2);
  @table-padding-vertical-sm: (@table-padding-vertical / 2);
  @table-padding-horizontal-sm: (@table-padding-horizontal / 2);
  @table-border-color: @border-color-split;
  @table-border-radius-base: @border-radius-base;
  @table-footer-bg: @background-color-light;
  @table-footer-color: @heading-color;
  @table-header-bg-sm: @table-header-bg;
  @table-font-size: @font-size-base;
  @table-font-size-md: @table-font-size;
  @table-font-size-sm: @table-font-size;
  // Sorter
  // Legacy: `table-header-sort-active-bg` is used for hover not real active
  @table-header-sort-active-bg: darken(@table-header-bg, 3%);
  // Filter
  @table-header-filter-active-bg: darken(@table-header-sort-active-bg, 5%);
  @table-filter-btns-bg: inherit;
  @table-filter-dropdown-bg: @component-background;
  @table-expand-icon-bg: @component-background;
  @table-selection-column-width: 32px;
  // Sticky
  @table-sticky-scroll-bar-bg: fade(#000, 35%);
  @table-sticky-scroll-bar-radius: 4px;

  // Tag
  // --
  @tag-default-bg: @background-color-light;
  @tag-default-color: @text-color;
  @tag-font-size: @font-size-sm;
  @tag-line-height: 20px;

  // TimePicker
  // ---
  @picker-bg: @component-background;
  @picker-basic-cell-hover-color: @item-hover-bg;
  @picker-basic-cell-active-with-range-color: @primary-1;
  @picker-basic-cell-hover-with-range-color: lighten(@primary-color, 35%);
  @picker-basic-cell-disabled-bg: @disabled-bg;
  @picker-border-color: @border-color-split;
  @picker-date-hover-range-border-color: lighten(@primary-color, 20%);
  @picker-date-hover-range-color: @picker-basic-cell-hover-with-range-color;
  @picker-time-panel-column-width: 56px;
  @picker-time-panel-column-height: 224px;
  @picker-time-panel-cell-height: 28px;
  @picker-panel-cell-height: 24px;
  @picker-panel-cell-width: 36px;
  @picker-text-height: 40px;
  @picker-panel-without-time-cell-height: 66px;

  // Calendar
  // ---
  @calendar-bg: @component-background;
  @calendar-input-bg: @input-bg;
  @calendar-border-color: @border-color-inverse;
  @calendar-item-active-bg: @item-active-bg;
  @calendar-full-bg: @calendar-bg;
  @calendar-full-panel-bg: @calendar-full-bg;

  // Carousel
  // ---
  @carousel-dot-width: 16px;
  @carousel-dot-height: 3px;
  @carousel-dot-active-width: 24px;

  // Badge
  // ---
  @badge-height: 20px;
  @badge-height-sm: 14px;
  @badge-dot-size: 6px;
  @badge-font-size: @font-size-sm;
  @badge-font-size-sm: @font-size-sm;
  @badge-font-weight: normal;
  @badge-status-size: 6px;
  @badge-text-color: @component-background;
  @badge-color: @highlight-color;

  // Rate
  // ---
  @rate-star-color: @yellow-6;
  @rate-star-bg: @border-color-split;
  @rate-star-size: 20px;
  @rate-star-hover-scale: scale(1.1);

  // Card
  // ---
  @card-head-color: @heading-color;
  @card-head-background: transparent;
  @card-head-font-size: @font-size-lg;
  @card-head-font-size-sm: @font-size-base;
  @card-head-padding: 16px;
  @card-head-padding-sm: (@card-head-padding / 2);
  @card-head-height: 48px;
  @card-head-height-sm: 36px;
  @card-inner-head-padding: 12px;
  @card-padding-base: 24px;
  @card-padding-base-sm: (@card-padding-base / 2);
  @card-actions-background: @component-background;
  @card-actions-li-margin: 12px 0;
  @card-skeleton-bg: #cfd8dc;
  @card-background: @component-background;
  @card-shadow: 0 1px 2px -2px rgba(0, 0, 0, 0.16),
    0 3px 6px 0 rgba(0, 0, 0, 0.12), 0 5px 12px 4px rgba(0, 0, 0, 0.09);
  @card-radius: @border-radius-base;
  @card-head-tabs-margin-bottom: -17px;
  @card-head-extra-color: @text-color;

  // Comment
  // ---
  @comment-bg: inherit;
  @comment-padding-base: @padding-md 0;
  @comment-nest-indent: 44px;
  @comment-font-size-base: @font-size-base;
  @comment-font-size-sm: @font-size-sm;
  @comment-author-name-color: @text-color-secondary;
  @comment-author-time-color: #ccc;
  @comment-action-color: @text-color-secondary;
  @comment-action-hover-color: #595959;
  @comment-actions-margin-bottom: inherit;
  @comment-actions-margin-top: @margin-sm;
  @comment-content-detail-p-margin-bottom: inherit;

  // Tabs
  // ---
  @tabs-card-head-background: @background-color-light;
  @tabs-card-height: 40px;
  @tabs-card-active-color: @primary-color;
  @tabs-card-horizontal-padding: (
      (@tabs-card-height - floor(@font-size-base * @line-height-base)) / 2
    ) - @border-width-base @padding-md;
  @tabs-card-horizontal-padding-sm: 6px @padding-md;
  @tabs-card-horizontal-padding-lg: 7px @padding-md 6px;
  @tabs-title-font-size: @font-size-base;
  @tabs-title-font-size-lg: @font-size-lg;
  @tabs-title-font-size-sm: @font-size-base;
  @tabs-ink-bar-color: @primary-color;
  @tabs-bar-margin: 0 0 @margin-md 0;
  @tabs-horizontal-margin: 0 32px 0 0;
  @tabs-horizontal-margin-rtl: 0 0 0 32px;
  @tabs-horizontal-padding: @padding-sm 0;
  @tabs-horizontal-padding-lg: @padding-md 0;
  @tabs-horizontal-padding-sm: @padding-xs 0;
  @tabs-vertical-padding: @padding-xs @padding-lg;
  @tabs-vertical-margin: 0 0 @margin-md 0;
  @tabs-scrolling-size: 32px;
  @tabs-highlight-color: @primary-color;
  @tabs-hover-color: @primary-5;
  @tabs-active-color: @primary-7;
  @tabs-card-gutter: 2px;
  @tabs-card-tab-active-border-top: 2px solid transparent;

  // BackTop
  // ---
  @back-top-color: #fff;
  @back-top-bg: @text-color-secondary;
  @back-top-hover-bg: @text-color;

  // Avatar
  // ---
  @avatar-size-base: 32px;
  @avatar-size-lg: 40px;
  @avatar-size-sm: 24px;
  @avatar-font-size-base: 18px;
  @avatar-font-size-lg: 24px;
  @avatar-font-size-sm: 14px;
  @avatar-bg: #ccc;
  @avatar-color: #fff;
  @avatar-border-radius: @border-radius-base;
  @avatar-group-overlapping: -8px;
  @avatar-group-space: 3px;
  @avatar-group-border-color: #fff;

  // Switch
  // ---
  @switch-height: 22px;
  @switch-sm-height: 16px;
  @switch-min-width: 44px;
  @switch-sm-min-width: 28px;
  @switch-disabled-opacity: 0.4;
  @switch-color: @primary-color;
  @switch-bg: @component-background;
  @switch-shadow-color: fade(#00230b, 20%);
  @switch-padding: 2px;
  @switch-inner-margin-min: ceil(@switch-height * 0.3);
  @switch-inner-margin-max: ceil(@switch-height * 1.1);
  @switch-sm-inner-margin-min: ceil(@switch-sm-height * 0.3);
  @switch-sm-inner-margin-max: ceil(@switch-sm-height * 1.1);

  // Pagination
  // ---
  @pagination-item-bg: @component-background;
  @pagination-item-size: @height-base;
  @pagination-item-size-sm: 24px;
  @pagination-font-family: @font-family;
  @pagination-font-weight-active: 500;
  @pagination-item-bg-active: @component-background;
  @pagination-item-link-bg: @component-background;
  @pagination-item-disabled-color-active: @white;
  @pagination-item-disabled-bg-active: darken(@disabled-bg, 10%);
  @pagination-item-input-bg: @component-background;
  @pagination-mini-options-size-changer-top: 0px;

  // PageHeader
  // ---
  @page-header-padding: @padding-lg;
  @page-header-padding-vertical: @padding-md;
  @page-header-padding-breadcrumb: @padding-sm;
  @page-header-content-padding-vertical: @padding-sm;
  @page-header-back-color: #000;
  @page-header-ghost-bg: inherit;
  @page-header-heading-title: @heading-4-size;
  @page-header-heading-sub-title: 14px;
  @page-header-tabs-tab-font-size: 16px;

  // Breadcrumb
  // ---
  @breadcrumb-base-color: @text-color-secondary;
  @breadcrumb-last-item-color: @text-color;
  @breadcrumb-font-size: @font-size-base;
  @breadcrumb-icon-font-size: @font-size-base;
  @breadcrumb-link-color: @text-color-secondary;
  @breadcrumb-link-color-hover: @primary-5;
  @breadcrumb-separator-color: @text-color-secondary;
  @breadcrumb-separator-margin: 0 @padding-xs;

  // Slider
  // ---
  @slider-margin: 10px 6px 10px;
  @slider-rail-background-color: @background-color-base;
  @slider-rail-background-color-hover: #e1e1e1;
  @slider-track-background-color: @primary-3;
  @slider-track-background-color-hover: @primary-4;
  @slider-handle-border-width: 2px;
  @slider-handle-background-color: @component-background;
  @slider-handle-color: @primary-3;
  @slider-handle-color-hover: @primary-4;
  @slider-handle-color-focus: tint(@primary-color, 20%);
  @slider-handle-color-focus-shadow: fade(@primary-color, 12%);
  @slider-handle-color-tooltip-open: @primary-color;
  @slider-handle-size: 14px;
  @slider-handle-margin-top: -5px;
  @slider-handle-shadow: 0;
  @slider-dot-border-color: @border-color-split;
  @slider-dot-border-color-active: tint(@primary-color, 50%);
  @slider-disabled-color: @disabled-color;
  @slider-disabled-background-color: @component-background;

  // Tree
  // ---
  @tree-bg: @component-background;
  @tree-title-height: 24px;
  @tree-child-padding: 18px;
  @tree-directory-selected-color: #fff;
  @tree-directory-selected-bg: @primary-color;
  @tree-node-hover-bg: @item-hover-bg;
  @tree-node-selected-bg: @primary-2;

  // Collapse
  // ---
  @collapse-header-padding: @padding-sm @padding-md;
  @collapse-header-padding-extra: 40px;
  @collapse-header-bg: @background-color-light;
  @collapse-content-padding: @padding-md;
  @collapse-content-bg: @component-background;
  @collapse-header-arrow-left: 16px;

  // Skeleton
  // ---
  @skeleton-color: rgba(190, 190, 190, 0.2);
  @skeleton-to-color: shade(@skeleton-color, 5%);
  @skeleton-paragraph-margin-top: 28px;
  @skeleton-paragraph-li-margin-top: @margin-md;
  @skeleton-paragraph-li-height: 16px;
  @skeleton-title-height: 16px;
  @skeleton-title-paragraph-margin-top: @margin-lg;

  // Transfer
  // ---
  @transfer-header-height: 40px;
  @transfer-item-height: @height-base;
  @transfer-disabled-bg: @disabled-bg;
  @transfer-list-height: 200px;
  @transfer-item-hover-bg: @item-hover-bg;
  @transfer-item-padding-vertical: 6px;
  @transfer-list-search-icon-top: 12px;

  // Message
  // ---
  @message-notice-content-padding: 10px 16px;
  @message-notice-content-bg: @component-background;
  // Motion
  // ---
  @wave-animation-width: 6px;

  // Alert
  // ---
  @alert-success-border-color: ~`colorPalette("@{success-color}", 3) `;
  @alert-success-bg-color: ~`colorPalette("@{success-color}", 1) `;
  @alert-success-icon-color: @success-color;
  @alert-info-border-color: ~`colorPalette("@{info-color}", 3) `;
  @alert-info-bg-color: ~`colorPalette("@{info-color}", 1) `;
  @alert-info-icon-color: @info-color;
  @alert-warning-border-color: ~`colorPalette("@{warning-color}", 3) `;
  @alert-warning-bg-color: ~`colorPalette("@{warning-color}", 1) `;
  @alert-warning-icon-color: @warning-color;
  @alert-error-border-color: ~`colorPalette("@{error-color}", 3) `;
  @alert-error-bg-color: ~`colorPalette("@{error-color}", 1) `;
  @alert-error-icon-color: @error-color;
  @alert-message-color: @heading-color;
  @alert-text-color: @text-color;
  @alert-close-color: @text-color-secondary;
  @alert-close-hover-color: @icon-color-hover;
  @alert-no-icon-padding-vertical: @padding-xs;
  @alert-with-description-no-icon-padding-vertical: @padding-md - 1px;
  @alert-with-description-padding-vertical: @padding-md - 1px;
  @alert-with-description-padding: @alert-with-description-padding-vertical 15px
    @alert-with-description-no-icon-padding-vertical
    @alert-with-description-icon-size;
  @alert-icon-top: 8px + @font-size-base * (@line-height-base / 2) -
    (@font-size-base / 2);
  @alert-with-description-icon-size: 24px;

  // List
  // ---
  @list-header-background: transparent;
  @list-footer-background: transparent;
  @list-empty-text-padding: @padding-md;
  @list-item-padding: @padding-sm 0;
  @list-item-padding-sm: @padding-xs @padding-md;
  @list-item-padding-lg: 16px 24px;
  @list-item-meta-margin-bottom: @padding-md;
  @list-item-meta-avatar-margin-right: @padding-md;
  @list-item-meta-title-margin-bottom: @padding-sm;
  @list-customize-card-bg: @component-background;
  @list-item-meta-description-font-size: @font-size-base;

  // Statistic
  // ---
  @statistic-title-font-size: @font-size-base;
  @statistic-content-font-size: 24px;
  @statistic-unit-font-size: 24px;
  @statistic-font-family: @font-family;

  // Drawer
  // ---
  @drawer-header-padding: @padding-md @padding-lg;
  @drawer-body-padding: @padding-lg;
  @drawer-bg: @component-background;
  @drawer-footer-padding-vertical: @modal-footer-padding-vertical;
  @drawer-footer-padding-horizontal: @modal-footer-padding-horizontal;
  @drawer-header-close-size: 56px;

  // Timeline
  // ---
  @timeline-width: 2px;
  @timeline-color: @border-color-split;
  @timeline-dot-border-width: 2px;
  @timeline-dot-color: @primary-color;
  @timeline-dot-bg: @component-background;
  @timeline-item-padding-bottom: 20px;

  // Typography
  // ---
  @typography-title-font-weight: 600;
  @typography-title-margin-top: 1.2em;
  @typography-title-margin-bottom: 0.5em;

  // Upload
  // ---
  @upload-actions-color: @text-color-secondary;

  // Steps
  // ---
  @process-tail-color: @border-color-split;
  @steps-nav-arrow-color: fade(@black, 25%);
  @steps-background: @component-background;
  @steps-icon-size: 32px;
  @steps-icon-custom-size: @steps-icon-size;
  @steps-icon-custom-top: 0px;
  @steps-icon-custom-font-size: 24px;
  @steps-icon-top: -1px;
  @steps-icon-font-size: @font-size-lg;
  @steps-icon-margin: 0 8px 0 0;
  @steps-title-line-height: @height-base;
  @steps-small-icon-size: 24px;
  @steps-small-icon-margin: 0 8px 0 0;
  @steps-dot-size: 8px;
  @steps-dot-top: 2px;
  @steps-current-dot-size: 10px;
  @steps-description-max-width: 140px;
  @steps-nav-content-max-width: auto;
  @steps-vertical-icon-width: 16px;
  @steps-vertical-tail-width: 16px;
  @steps-vertical-tail-width-sm: 12px;

  // Notification
  // ---
  @notification-bg: @component-background;
  @notification-padding-vertical: 16px;
  @notification-padding-horizontal: 24px;

  //  Result
  // ---
  @result-title-font-size: 24px;
  @result-subtitle-font-size: @font-size-base;
  @result-icon-font-size: 72px;
  @result-extra-margin: 24px 0 0 0;

  // Image
  // ---
  @image-size-base: 48px;
  @image-font-size-base: 24px;
  @image-bg: #f5f5f5;
  @image-color: #fff;
  @image-mask-font-size: 16px;
  @image-preview-operation-size: 18px;
  @image-preview-operation-color: @text-color-dark;
  @image-preview-operation-disabled-color: fade(
    @image-preview-operation-color,
    25%
  );
